import logging
from livekit.agents import function_tool, RunContext
from datetime import datetime, timedelta
from typing import Optional, Dict, List
from enum import Enum
import json
from clinic_knowledge import (
    CLINIC_INFO, SERVICES, FAQ, APPOINTMENT_TYPES, 
    INSURANCE_INFO, PAYMENT_OPTIONS, STAFF
)
from appointment_manager import appointment_manager

# Simple in-memory storage for appointments (in production, use a proper database)
appointments_db = {}
patient_db = {}

# CallManager for conversation status
class CallStatus(Enum):
    ACTIVE = "active"
    ENDING = "ending"
    COMPLETED = "completed"

class CallManager:
    def __init__(self):
        self.status = CallStatus.ACTIVE
        self.notes = []
        self.patient_info = {}
        self.scheduled_appointment = None
        self.conversation_ended = False
        self.session = None  # LiveKit session reference
        
    def add_note(self, note: str):
        self.notes.append(f"{datetime.now().strftime('%H:%M:%S')}: {note}")
        
    def set_patient_info(self, info: dict):
        self.patient_info.update(info)
        
    def mark_appointment_scheduled(self, appointment_data: dict):
        self.scheduled_appointment = appointment_data
        
    def initiate_call_end(self):
        self.status = CallStatus.ENDING
        self.conversation_ended = True
        logging.info("üî¥ Gespr√§ch wird beendet - CallManager Status: ENDING")
        
    def is_conversation_ended(self) -> bool:
        return self.conversation_ended
        
    def set_session(self, session):
        """Set the LiveKit session for call management"""
        self.session = session
        
    def get_summary(self) -> str:
        summary = f"Gespr√§ch beendet um {datetime.now().strftime('%H:%M:%S')}\n"
        if self.patient_info:
            summary += f"Patient: {self.patient_info.get('name', 'N/A')}\n"
            summary += f"Telefon: {self.patient_info.get('phone', 'N/A')}\n"
        if self.scheduled_appointment:
            summary += f"Termin gebucht: {self.scheduled_appointment}\n"
        if self.notes:
            summary += f"Notizen: {', '.join(self.notes)}\n"
        return summary

# Global CallManager instance
call_manager = CallManager()

@function_tool()
async def get_clinic_info(
    context: RunContext,
    info_type: str = "general"
) -> str:
    """
    Stellt Informationen √ºber die Zahnarztpraxis bereit.
    info_type kann sein: 'general', 'hours', 'contact', 'location', 'parking'
    """
    try:
        if info_type == "general":
            return f"""
Zahnarztpraxis Dr. Emanuela
Adresse: {CLINIC_INFO['address']}
Telefon: {CLINIC_INFO['phone']}
E-Mail: {CLINIC_INFO['email']}
√ñffnungszeiten: Montag-Freitag 9:00-18:00, Samstag 9:00-13:00
{CLINIC_INFO['emergency_hours']}
{CLINIC_INFO['parking']}
"""
        elif info_type == "hours":
            hours_text = "√ñffnungszeiten:\n"
            for day, hours in CLINIC_INFO['hours'].items():
                hours_text += f"{day.capitalize()}: {hours}\n"
            hours_text += f"\n{CLINIC_INFO['emergency_hours']}"
            return hours_text
        
        elif info_type == "contact":
            return f"""
Kontakt Zahnarztpraxis Dr. Emanuela:
Telefon: {CLINIC_INFO['phone']}
E-Mail: {CLINIC_INFO['email']}
Website: {CLINIC_INFO['website']}
"""
        elif info_type == "location":
            return f"""
Indirizzo: {CLINIC_INFO['address']}
{CLINIC_INFO['parking']}
{CLINIC_INFO['accessibility']}
"""
        else:
            return "Informationstyp nicht erkannt. Ich kann allgemeine Informationen, √ñffnungszeiten, Kontakt oder Standort bereitstellen."
            
    except Exception as e:
        logging.error(f"Errore nel recupero informazioni clinica: {e}")
        return "Entschuldigung, es ist ein Fehler beim Abrufen der Informationen aufgetreten."

@function_tool()
async def get_services_info(
    context: RunContext,
    service_type: str = "all"
) -> str:
    """
    Fornisce informazioni sui servizi dentistici offerti.
    service_type pu√≤ essere: 'all', 'odontoiatria_generale', 'igiene_dentale', 'ortodonzia', 'implantologia', 'estetica_dentale', 'endodonzia', 'chirurgia_orale', 'protesi'
    """
    try:
        if service_type == "all":
            services_text = "Servizi offerti dal nostro studio:\n\n"
            for key, service in SERVICES.items():
                services_text += f"‚Ä¢ {service['name']}: {service['description']}\n"
                services_text += f"  Durata: {service['duration']}, Costo: {service['price_range']}\n\n"
            return services_text
        
        elif service_type in SERVICES:
            service = SERVICES[service_type]
            return f"""
{service['name']}
Descrizione: {service['description']}
Durata della seduta: {service['duration']}
Costo indicativo: {service['price_range']}
"""
        else:
            return "Servizio non trovato. I nostri servizi principali sono: odontoiatria generale, igiene dentale, ortodonzia, implantologia, estetica dentale, endodonzia, chirurgia orale e protesi."
            
    except Exception as e:
        logging.error(f"Errore nel recupero informazioni servizi: {e}")
        return "Mi dispiace, si √® verificato un errore nel recupero delle informazioni sui servizi."

@function_tool()
async def answer_faq(
    context: RunContext,
    question_topic: str
) -> str:
    """
    Risponde alle domande frequenti sui servizi dentistici.
    question_topic pu√≤ essere: 'costi', 'assicurazioni', 'emergenze', 'prima_visita', 'pagamenti', 'bambini', 'anestesia', 'igiene_frequenza'
    """
    try:
        # Cerca la domanda pi√π pertinente
        for key, faq_item in FAQ.items():
            if question_topic.lower() in key.lower() or question_topic.lower() in faq_item['question'].lower():
                return f"Domanda: {faq_item['question']}\nRisposta: {faq_item['answer']}"
        
        # Se non trova una corrispondenza esatta, restituisce tutte le FAQ
        faq_text = "Ecco le nostre domande frequenti:\n\n"
        for faq_item in FAQ.values():
            faq_text += f"Q: {faq_item['question']}\nR: {faq_item['answer']}\n\n"
        return faq_text
        
    except Exception as e:
        logging.error(f"Errore nel recupero FAQ: {e}")
        return "Mi dispiace, si √® verificato un errore nel recupero delle informazioni."

@function_tool()
async def check_availability(
    context: RunContext,
    date: str,
    appointment_type: str = "visita_controllo"
) -> str:
    """
    Controlla la disponibilit√† per un appuntamento in una data specifica.
    date formato: YYYY-MM-DD
    appointment_type: tipo di appuntamento richiesto
    """
    try:
        # Simulazione controllo disponibilit√† (in produzione, integrare con sistema di calendario reale)
        target_date = datetime.strptime(date, "%Y-%m-%d")
        
        # Controlla se la data √® nel passato
        if target_date.date() < datetime.now().date():
            return "Mi dispiace, non posso prenotare appuntamenti per date passate."
        
        # Controlla se √® domenica (clinica chiusa)
        if target_date.weekday() == 6:  # Domenica
            return "Mi dispiace, la clinica √® chiusa la domenica. Posso proporle un altro giorno?"
        
        # Controlla se √® sabato (orario ridotto)
        if target_date.weekday() == 5:  # Sabato
            available_times = ["09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30"]
        else:
            available_times = ["09:00", "09:30", "10:00", "10:30", "11:00", "11:30", 
                             "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30"]
        
        # Simula alcuni slot gi√† occupati
        occupied_slots = appointments_db.get(date, [])
        available_times = [time for time in available_times if time not in occupied_slots]
        
        if available_times:
            return f"Disponibilit√† per {date}:\nOrari disponibili: {', '.join(available_times[:6])}"
        else:
            # Proponi date alternative
            next_date = target_date + timedelta(days=1)
            return f"Mi dispiace, non ci sono slot disponibili per {date}. Posso proporle {next_date.strftime('%Y-%m-%d')}?"
            
    except ValueError:
        return "Formato data non valido. Utilizzare il formato YYYY-MM-DD (es. 2024-01-15)."
    except Exception as e:
        logging.error(f"Errore nel controllo disponibilit√†: {e}")
        return "Mi dispiace, si √® verificato un errore nel controllo della disponibilit√†."

@function_tool()
async def schedule_appointment(
    context: RunContext,
    patient_name: str,
    phone: str,
    date: str,
    time: str,
    appointment_type: str = "visita_controllo",
    notes: str = ""
) -> str:
    """
    Prenota un nuovo appuntamento.
    Parametri: nome paziente, telefono, data (YYYY-MM-DD), ora (HH:MM), tipo appuntamento, note aggiuntive
    """
    try:
        # Validazione data e ora
        appointment_datetime = datetime.strptime(f"{date} {time}", "%Y-%m-%d %H:%M")
        
        if appointment_datetime < datetime.now():
            return "Non posso prenotare appuntamenti per date e orari passati."
        
        # Controlla se il tipo di appuntamento esiste
        if appointment_type not in APPOINTMENT_TYPES:
            return f"Tipo di appuntamento non riconosciuto. Tipi disponibili: {', '.join(APPOINTMENT_TYPES.keys())}"
        
        # Simula la prenotazione (in produzione, salvare in database)
        appointment_id = f"APP_{datetime.now().strftime('%Y%m%d%H%M%S')}"
        
        appointment_data = {
            "id": appointment_id,
            "patient_name": patient_name,
            "phone": phone,
            "date": date,
            "time": time,
            "type": appointment_type,
            "notes": notes,
            "status": "confermato",
            "created_at": datetime.now().isoformat()
        }
        
        # Salva l'appuntamento
        if date not in appointments_db:
            appointments_db[date] = []
        appointments_db[date].append(time)
        
        # Salva i dati del paziente
        patient_db[phone] = {
            "name": patient_name,
            "phone": phone,
            "last_appointment": appointment_id
        }
        
        appointment_info = APPOINTMENT_TYPES[appointment_type]
        
        return f"""
Appuntamento confermato!

Dettagli:
‚Ä¢ Paziente: {patient_name}
‚Ä¢ Data: {date}
‚Ä¢ Ora: {time}
‚Ä¢ Tipo: {appointment_info['name']}
‚Ä¢ Durata prevista: {appointment_info['duration']} minuti
‚Ä¢ Codice prenotazione: {appointment_id}

La contatteremo il giorno prima per confermare l'appuntamento.
Ricordi di portare un documento d'identit√† e la tessera sanitaria.
"""
        
    except ValueError:
        return "Formato data o ora non valido. Utilizzare YYYY-MM-DD per la data e HH:MM per l'ora."
    except Exception as e:
        logging.error(f"Errore nella prenotazione: {e}")
        return "Mi dispiace, si √® verificato un errore durante la prenotazione. La prego di riprovare."

@function_tool()
async def collect_patient_info(
    context: RunContext,
    name: str,
    phone: str,
    email: str = "",
    birth_date: str = "",
    medical_conditions: str = "",
    medications: str = "",
    allergies: str = "",
    previous_dentist: str = ""
) -> str:
    """
    Raccoglie le informazioni del paziente per la prima visita.
    """
    try:
        patient_data = {
            "name": name,
            "phone": phone,
            "email": email,
            "birth_date": birth_date,
            "medical_conditions": medical_conditions,
            "medications": medications,
            "allergies": allergies,
            "previous_dentist": previous_dentist,
            "registration_date": datetime.now().isoformat()
        }
        
        # Salva i dati del paziente
        patient_db[phone] = patient_data
        
        return f"""
Informazioni paziente registrate:
‚Ä¢ Nome: {name}
‚Ä¢ Telefono: {phone}
‚Ä¢ Email: {email if email else 'Non fornita'}

Grazie per aver fornito le sue informazioni. 
Alla prima visita le chiederemo di compilare una scheda anamnestica pi√π dettagliata.
Ricordi di portare un documento d'identit√†, tessera sanitaria ed eventuali radiografie precedenti.
"""
        
    except Exception as e:
        logging.error(f"Errore nella raccolta dati paziente: {e}")
        return "Mi dispiace, si √® verificato un errore nel salvataggio delle informazioni."

@function_tool()
async def cancel_appointment(
    context: RunContext,
    patient_name: str,
    phone: str,
    date: str,
    time: str = ""
) -> str:
    """
    Cancella un appuntamento esistente.
    Parametri: nome paziente, telefono, data (YYYY-MM-DD), ora (opzionale)
    """
    try:
        # Cerca l'appuntamento
        if date in appointments_db:
            if time and time in appointments_db[date]:
                appointments_db[date].remove(time)
                return f"""
Appuntamento cancellato con successo.

Dettagli cancellazione:
‚Ä¢ Paziente: {patient_name}
‚Ä¢ Data: {date}
‚Ä¢ Ora: {time}

La cancellazione √® stata registrata. Se desidera riprogrammare, sar√≤ felice di aiutarla a trovare una nuova data.
"""
            elif not time:
                # Se non √® specificata l'ora, mostra gli appuntamenti per quella data
                return f"Ho trovato appuntamenti per {date}. Pu√≤ specificare l'orario da cancellare?"

        return f"Non ho trovato appuntamenti per {patient_name} in data {date}. Pu√≤ verificare i dati?"

    except Exception as e:
        logging.error(f"Errore nella cancellazione: {e}")
        return "Mi dispiace, si √® verificato un errore durante la cancellazione."

@function_tool()
async def reschedule_appointment(
    context: RunContext,
    patient_name: str,
    phone: str,
    old_date: str,
    old_time: str,
    new_date: str,
    new_time: str
) -> str:
    """
    Riprogramma un appuntamento esistente.
    Parametri: nome, telefono, vecchia data, vecchia ora, nuova data, nuova ora
    """
    try:
        # Verifica che il vecchio appuntamento esista
        if old_date not in appointments_db or old_time not in appointments_db[old_date]:
            return f"Non ho trovato l'appuntamento originale per {patient_name} il {old_date} alle {old_time}."

        # Verifica disponibilit√† della nuova data/ora
        new_datetime = datetime.strptime(f"{new_date} {new_time}", "%Y-%m-%d %H:%M")
        if new_datetime < datetime.now():
            return "Non posso riprogrammare per date e orari passati."

        # Controlla se il nuovo slot √® disponibile
        if new_date in appointments_db and new_time in appointments_db[new_date]:
            return f"Mi dispiace, lo slot {new_date} alle {new_time} √® gi√† occupato. Posso proporle altri orari?"

        # Esegui la riprogrammazione
        # Rimuovi il vecchio appuntamento
        appointments_db[old_date].remove(old_time)

        # Aggiungi il nuovo appuntamento
        if new_date not in appointments_db:
            appointments_db[new_date] = []
        appointments_db[new_date].append(new_time)

        return f"""
Appuntamento riprogrammato con successo!

Vecchio appuntamento:
‚Ä¢ Data: {old_date}
‚Ä¢ Ora: {old_time}

Nuovo appuntamento:
‚Ä¢ Paziente: {patient_name}
‚Ä¢ Data: {new_date}
‚Ä¢ Ora: {new_time}

La contatteremo il giorno prima per confermare il nuovo appuntamento.
"""

    except ValueError:
        return "Formato data o ora non valido. Utilizzare YYYY-MM-DD per la data e HH:MM per l'ora."
    except Exception as e:
        logging.error(f"Errore nella riprogrammazione: {e}")
        return "Mi dispiace, si √® verificato un errore durante la riprogrammazione."

@function_tool()
async def get_insurance_info(
    context: RunContext,
    insurance_name: str = ""
) -> str:
    """
    Fornisce informazioni sulle assicurazioni accettate e coperture.
    """
    try:
        if insurance_name:
            if insurance_name in INSURANCE_INFO["accepted_insurances"]:
                return f"""
S√¨, accettiamo {insurance_name}.

{INSURANCE_INFO["coverage_info"]}
{INSURANCE_INFO["direct_billing"]}

Le consiglio di contattare la sua assicurazione per verificare la copertura specifica del trattamento di cui necessita.
"""
            else:
                return f"""
{insurance_name} non √® nell'elenco delle nostre assicurazioni convenzionate.

Assicurazioni accettate:
{', '.join(INSURANCE_INFO["accepted_insurances"])}

Tuttavia, pu√≤ sempre verificare con la sua assicurazione se offre rimborsi per le nostre prestazioni.
"""
        else:
            return f"""
Assicurazioni sanitarie accettate:
{', '.join(INSURANCE_INFO["accepted_insurances"])}

{INSURANCE_INFO["coverage_info"]}
{INSURANCE_INFO["direct_billing"]}
"""

    except Exception as e:
        logging.error(f"Errore info assicurazioni: {e}")
        return "Mi dispiace, si √® verificato un errore nel recupero delle informazioni assicurative."

@function_tool()
async def get_payment_info(
    context: RunContext
) -> str:
    """
    Fornisce informazioni sui metodi di pagamento accettati.
    """
    try:
        return f"""
Metodi di pagamento accettati:
{', '.join(PAYMENT_OPTIONS["methods"])}

{PAYMENT_OPTIONS["installments"]}

{PAYMENT_OPTIONS["receipts"]}

Per trattamenti costosi, possiamo discutere piani di pagamento personalizzati durante la visita.
"""

    except Exception as e:
        logging.error(f"Errore info pagamenti: {e}")
        return "Mi dispiace, si √® verificato un errore nel recupero delle informazioni sui pagamenti."

@function_tool()
async def get_naechste_freie_termine(
    context: RunContext,
    ab_datum: str = "",
    behandlungsart: str = "Kontrolluntersuchung",
    anzahl_vorschlaege: int = 5
) -> str:
    """
    Findet die n√§chsten verf√ºgbaren Termine f√ºr Patienten.
    ab_datum: Ab welchem Datum suchen (YYYY-MM-DD)
    behandlungsart: Art der Behandlung
    anzahl_vorschlaege: Anzahl der Vorschl√§ge
    """
    try:
        if not ab_datum:
            ab_datum = datetime.now().strftime("%Y-%m-%d")
        
        verfuegbare_termine = appointment_manager.get_verfuegbare_termine(ab_datum, anzahl_vorschlaege)
        
        if not verfuegbare_termine:
            return "Es tut mir leid, aber in den n√§chsten 30 Tagen sind keine Termine verf√ºgbar. Soll ich weiter in die Zukunft schauen?"
        
        response = f"üóìÔ∏è **Die n√§chsten verf√ºgbaren Termine f√ºr {behandlungsart}:**\n\n"
        
        for i, termin in enumerate(verfuegbare_termine, 1):
            response += f"{i}. {termin['anzeige']}\n"
        
        response += f"\nWelcher Termin w√ºrde Ihnen am besten passen?"
        
        return response
        
    except Exception as e:
        logging.error(f"Fehler bei der Terminsuche: {e}")
        return "Entschuldigung, es gab ein Problem bei der Terminsuche."

@function_tool()
async def get_tagesplan_arzt(
    context: RunContext,
    datum: str,
    detailliert: bool = True
) -> str:
    """
    Zeigt den Tagesplan f√ºr den Arzt f√ºr einen bestimmten Tag.
    datum: YYYY-MM-DD Format
    detailliert: True f√ºr detaillierte Ansicht, False f√ºr √úbersicht
    """
    try:
        return appointment_manager.get_tagesplan(datum, fuer_arzt=True)
        
    except Exception as e:
        logging.error(f"Fehler beim Abrufen des Tagesplans: {e}")
        return "Entschuldigung, es gab ein Problem beim Abrufen des Tagesplans."

@function_tool()
async def get_wochenuebersicht_arzt(
    context: RunContext,
    start_datum: str,
    fuer_arzt: bool = True
) -> str:
    """
    Zeigt die Wochen√ºbersicht der Termine f√ºr den Arzt.
    start_datum: Startdatum der Woche (YYYY-MM-DD)
    fuer_arzt: True f√ºr Arztansicht, False f√ºr Patienteninfo
    """
    try:
        return appointment_manager.get_wochenuebersicht(start_datum, fuer_arzt)
        
    except Exception as e:
        logging.error(f"Fehler bei Wochen√ºbersicht: {e}")
        return "Entschuldigung, es gab ein Problem bei der Wochen√ºbersicht."

@function_tool()
async def termin_buchen_erweitert(
    context: RunContext,
    patient_name: str,
    telefon: str,
    datum: str,
    uhrzeit: str,
    behandlungsart: str,
    email: str = "",
    beschreibung: str = "",
    notizen: str = ""
) -> str:
    """
    Bucht einen Termin mit erweiterten Informationen.
    patient_name: Name des Patienten
    telefon: Telefonnummer
    datum: Datum im Format YYYY-MM-DD
    uhrzeit: Uhrzeit im Format HH:MM
    behandlungsart: Art der Behandlung
    email: E-Mail-Adresse (optional)
    beschreibung: Beschreibung des Termins (optional)
    notizen: Zus√§tzliche Notizen (optional)
    """
    try:
        return appointment_manager.termin_hinzufuegen(
            patient_name, telefon, datum, uhrzeit, behandlungsart, 
            email, beschreibung, notizen
        )
        
    except Exception as e:
        logging.error(f"Fehler beim Buchen des Termins: {e}")
        return f"Entschuldigung, es gab ein Problem beim Buchen des Termins: {str(e)}"

@function_tool()
async def get_patientenhistorie(
    context: RunContext,
    telefon: str
) -> str:
    """
    Zeigt die Terminhistorie eines Patienten.
    telefon: Telefonnummer des Patienten
    """
    try:
        return appointment_manager.get_patientenhistorie(telefon)
        
    except Exception as e:
        logging.error(f"Fehler bei Patientenhistorie: {e}")
        return "Entschuldigung, es gab ein Problem beim Abrufen der Patientenhistorie."

@function_tool()
async def termine_suchen(
    context: RunContext,
    suchbegriff: str,
    zeitraum: str = "naechste_woche"
) -> str:
    """
    Sucht nach Terminen basierend auf verschiedenen Kriterien.
    suchbegriff: Suchbegriff (Patientenname, Telefon, Behandlungsart)
    zeitraum: Zeitraum (heute, morgen, naechste_woche, naechster_monat)
    """
    try:
        return appointment_manager.termin_suchen(suchbegriff, zeitraum)
        
    except Exception as e:
        logging.error(f"Fehler bei der Terminsuche: {e}")
        return "Entschuldigung, es gab ein Problem bei der Terminsuche."

@function_tool()
async def get_praxis_statistiken(
    context: RunContext,
    zeitraum: str = "diese_woche"
) -> str:
    """
    Zeigt Statistiken f√ºr die Praxis.
    zeitraum: Zeitraum (heute, diese_woche, diesen_monat)
    """
    try:
        return appointment_manager.get_statistiken(zeitraum)
        
    except Exception as e:
        logging.error(f"Fehler bei Statistiken: {e}")
        return "Entschuldigung, es gab ein Problem beim Abrufen der Statistiken."

@function_tool()
async def termin_absagen(
    context: RunContext,
    termin_id: int,
    grund: str = ""
) -> str:
    """
    Sagt einen Termin ab.
    termin_id: ID des Termins
    grund: Grund der Absage (optional)
    """
    try:
        return appointment_manager.termin_absagen(termin_id, grund)
        
    except Exception as e:
        logging.error(f"Fehler beim Absagen des Termins: {e}")
        return f"Entschuldigung, es gab ein Problem beim Absagen des Termins: {str(e)}"

@function_tool()
async def check_verfuegbarkeit_erweitert(
    context: RunContext,
    datum: str,
    uhrzeit: str = ""
) -> str:
    """
    √úberpr√ºft die Verf√ºgbarkeit f√ºr einen bestimmten Tag oder Zeit.
    datum: YYYY-MM-DD Format
    uhrzeit: HH:MM Format (optional)
    """
    try:
        if uhrzeit:
            ist_frei = appointment_manager.ist_verfuegbar(datum, uhrzeit)
            if ist_frei:
                return f"‚úÖ Der Termin am {datum} um {uhrzeit} ist verf√ºgbar!"
            else:
                return f"‚ùå Der Termin am {datum} um {uhrzeit} ist bereits belegt."
        else:
            # Zeige alle verf√ºgbaren Zeiten f√ºr den Tag
            verfuegbare_zeiten = appointment_manager.get_verfuegbare_termine_tag(datum)
            if verfuegbare_zeiten:
                return f"‚úÖ Verf√ºgbare Zeiten am {datum}:\n" + "\n".join(f"‚Ä¢ {zeit}" for zeit in verfuegbare_zeiten)
            else:
                return f"‚ùå Am {datum} sind keine Termine verf√ºgbar."
        
    except Exception as e:
        logging.error(f"Fehler bei Verf√ºgbarkeitspr√ºfung: {e}")
        return "Entschuldigung, es gab ein Problem bei der Verf√ºgbarkeitspr√ºfung."

@function_tool()
async def parse_terminwunsch(
    context: RunContext,
    text: str
) -> str:
    """
    Verarbeitet nat√ºrliche Sprache f√ºr Terminw√ºnsche mit KI-Integration.
    text: Terminwunsch in nat√ºrlicher Sprache
    """
    try:
        titel, datum, uhrzeit, behandlungsart, kontext = appointment_manager.parse_natural_language(text)
        
        response = f"üìã **Terminwunsch verstanden:**\n\n"
        response += f"ÔøΩ Originaltext: '{text}'\n"
        response += f"ÔøΩüìÖ Datum: {datum}\n"
        response += f"üïê Uhrzeit: {uhrzeit or 'Flexibel'}\n"
        response += f"ü¶∑ Behandlung: {behandlungsart}\n\n"
        
        # Zus√§tzliche Kontextinformationen
        if kontext["ist_heute_arbeitstag"] and datum == kontext.get("aktuelles_datum"):
            response += f"‚ÑπÔ∏è **Hinweis**: Sie m√∂chten heute einen Termin.\n"
            if kontext["praxis_offen"]:
                response += f"‚úÖ Die Praxis ist derzeit ge√∂ffnet.\n"
            else:
                response += f"‚ùå Die Praxis ist derzeit geschlossen.\n"
                arbeitszeiten = kontext["arbeitszeiten_heute"]
                response += f"‚è∞ √ñffnungszeiten heute: {arbeitszeiten['vormittag']}"
                if arbeitszeiten['nachmittag']:
                    response += f", {arbeitszeiten['nachmittag']}"
                response += "\n"
            response += "\n"
        
        if uhrzeit:
            # Pr√ºfe Verf√ºgbarkeit
            ist_frei = appointment_manager.ist_verfuegbar(datum, uhrzeit)
            if ist_frei:
                response += f"‚úÖ **Der gew√ºnschte Termin ist verf√ºgbar!**\n"
                response += f"üìÖ {datum} um {uhrzeit} f√ºr {behandlungsart}\n\n"
                response += f"üí° M√∂chten Sie diesen Termin buchen?"
            else:
                response += f"‚ùå **Der gew√ºnschte Termin ist bereits belegt.**\n"
                response += f"üìÖ {datum} um {uhrzeit}\n\n"
                
                # Zeige intelligente Alternativen
                alternative_termine = appointment_manager.get_intelligente_terminvorschlaege(behandlungsart, datum, 3)
                response += f"üîÑ **Alternative Vorschl√§ge:**\n{alternative_termine}"
        else:
            # Zeige verf√ºgbare Zeiten f√ºr den Tag
            verfuegbare_zeiten = appointment_manager.get_verfuegbare_termine_tag(datum)
            if verfuegbare_zeiten:
                response += f"‚úÖ **Verf√ºgbare Zeiten am {datum}:**\n"
                for i, zeit in enumerate(verfuegbare_zeiten[:5], 1):
                    response += f"  {i}. {zeit} Uhr\n"
                response += f"\nüí° Welche Uhrzeit passt Ihnen am besten?"
            else:
                response += f"‚ùå **Am {datum} sind keine Termine verf√ºgbar.**\n"
                
                # Zeige intelligente Alternativen
                alternative_termine = appointment_manager.get_intelligente_terminvorschlaege(behandlungsart, datum, 3)
                response += f"\nüîÑ **Alternative Termine:**\n{alternative_termine}"
        
        return response
        
    except Exception as e:
        logging.error(f"Fehler beim Parsen des Terminwunsches: {e}")
        return "Entschuldigung, ich konnte Ihren Terminwunsch nicht verstehen."

@function_tool()
async def get_aktuelle_datetime_info(
    context: RunContext
) -> str:
    """
    Gibt aktuelle Datum- und Zeitinformationen zur√ºck, die die KI bereits kennt.
    Zeigt Praxiszeiten, Wochentag und Verf√ºgbarkeit.
    """
    try:
        info = appointment_manager.get_current_datetime_info()
        
        antwort = f"üïê **Aktuelle Datum- und Zeitinformationen:**\n\n"
        antwort += f"üìÖ **Heute**: {info['wochentag']}, {info['formatiert']}\n"
        antwort += f"üìÜ **Datum**: {info['aktuelles_datum']}\n"
        antwort += f"üïê **Uhrzeit**: {info['aktuelle_uhrzeit']}\n\n"
        
        antwort += f"üè• **Praxisstatus:**\n"
        if info['ist_heute_arbeitstag']:
            antwort += f"‚úÖ Heute ist ein Arbeitstag\n"
            arbeitszeiten = info['arbeitszeiten_heute']
            antwort += f"‚è∞ √ñffnungszeiten heute: {arbeitszeiten['vormittag']}"
            if arbeitszeiten['nachmittag']:
                antwort += f", {arbeitszeiten['nachmittag']}"
            antwort += "\n"
            
            if info['praxis_offen']:
                antwort += f"üü¢ Praxis ist derzeit **GE√ñFFNET**\n"
            else:
                antwort += f"üî¥ Praxis ist derzeit **GESCHLOSSEN**\n"
        else:
            antwort += f"‚ùå Heute ist kein Arbeitstag (Sonntag)\n"
            antwort += f"üî¥ Praxis ist **GESCHLOSSEN**\n"
        
        antwort += f"\nüìä **Weitere Infos:**\n"
        antwort += f"üìÖ Morgen: {info['morgen']}\n"
        antwort += f"üìÖ √úbermorgen: {info['√ºbermorgen']}\n"
        antwort += f"üìÖ N√§chste Woche: {info['n√§chste_woche']}\n"
        antwort += f"üìä Kalenderwoche: {info['kalenderwoche']}\n"
        
        return antwort
        
    except Exception as e:
        logging.error(f"Fehler bei Datetime-Info: {e}")
        return "Entschuldigung, es gab ein Problem beim Abrufen der Zeitinformationen."

@function_tool()
async def get_intelligente_terminvorschlaege(
    context: RunContext,
    behandlungsart: str = "Kontrolluntersuchung",
    ab_datum: str = "",
    anzahl: int = 5
) -> str:
    """
    Gibt intelligente Terminvorschl√§ge basierend auf dem aktuellen Datum und Kontext.
    behandlungsart: Art der Behandlung
    ab_datum: Ab welchem Datum (leer = intelligent bestimmt)
    anzahl: Anzahl der Vorschl√§ge
    """
    try:
        return appointment_manager.get_intelligente_terminvorschlaege(behandlungsart, ab_datum, anzahl)
        
    except Exception as e:
        logging.error(f"Fehler bei intelligenten Terminvorschl√§gen: {e}")
        return "Entschuldigung, es gab ein Problem bei den Terminvorschl√§gen."

@function_tool()
async def termin_buchen_mit_details(
    context: RunContext,
    patient_name: str,
    phone: str,
    appointment_date: str,
    appointment_time: str,
    treatment_type: str = "Kontrolluntersuchung",
    notes: str = ""
) -> str:
    """
    Bucht einen Termin mit allen erforderlichen Patientendetails.
    Stellt sicher, dass Name, Telefon und Beschreibung immer gespeichert werden.
    """
    try:
        # Patienteninformationen im CallManager speichern
        call_manager.set_patient_info({
            'name': patient_name,
            'phone': phone,
            'treatment_type': treatment_type,
            'notes': notes
        })
        
        # Termin buchen
        result = appointment_manager.termin_hinzufuegen(
            patient_name=patient_name,
            telefon=phone,
            datum=appointment_date,
            uhrzeit=appointment_time,
            behandlungsart=treatment_type,
            notizen=notes
        )
        
        if result:  # termin_hinzufuegen returns True on success
            appointment_data = {
                'patient_name': patient_name,
                'phone': phone,
                'date': appointment_date,
                'time': appointment_time,
                'treatment': treatment_type,
                'notes': notes
            }
            call_manager.mark_appointment_scheduled(appointment_data)
            call_manager.add_note(f"Termin gebucht: {appointment_date} {appointment_time}")
            
            return f"‚úÖ **Termin erfolgreich gebucht!**\n\n" \
                   f"üë§ **Patient**: {patient_name}\n" \
                   f"üìû **Telefon**: {phone}\n" \
                   f"üìÖ **Datum**: {appointment_date}\n" \
                   f"üïê **Uhrzeit**: {appointment_time}\n" \
                   f"ü¶∑ **Behandlung**: {treatment_type}\n" \
                   f"üìù **Notizen**: {notes if notes else 'Keine'}\n\n" \
                   f"Alle Ihre Daten wurden gespeichert. Vielen Dank f√ºr Ihr Vertrauen!"
        else:
            return f"‚ùå **Terminbuchung fehlgeschlagen**: Termin nicht verf√ºgbar oder bereits belegt"
            
    except Exception as e:
        logging.error(f"Fehler bei Terminbuchung mit Details: {e}")
        return f"‚ùå Entschuldigung, es gab ein Problem bei der Terminbuchung: {str(e)}"

@function_tool()
async def check_verfuegbarkeit_spezifisch(
    context: RunContext,
    datum: str,
    uhrzeit: str,
    behandlungsart: str = "Kontrolluntersuchung"
) -> str:
    """
    Pr√ºft spezifische Verf√ºgbarkeit f√ºr einen exakten Termin.
    """
    try:
        # Verf√ºgbarkeit pr√ºfen
        available = appointment_manager.ist_verfuegbar(datum, uhrzeit)
        
        if available:
            return f"‚úÖ **Termin verf√ºgbar!**\n\n" \
                   f"üìÖ **Datum**: {datum}\n" \
                   f"üïê **Uhrzeit**: {uhrzeit}\n" \
                   f"ü¶∑ **Behandlung**: {behandlungsart}\n\n" \
                   f"M√∂chten Sie diesen Termin buchen? Ich ben√∂tige dann Ihren Namen und Ihre Telefonnummer."
        else:
            # Alternative Termine vorschlagen
            alternatives = appointment_manager.get_intelligente_terminvorschlaege(behandlungsart, datum, 3)
            return f"‚ùå **Termin nicht verf√ºgbar**\n\n" \
                   f"Der gew√ºnschte Termin am {datum} um {uhrzeit} ist leider nicht verf√ºgbar.\n\n" \
                   f"üîÑ **Alternative Termine:**\n{alternatives}"
                   
    except Exception as e:
        logging.error(f"Fehler bei spezifischer Verf√ºgbarkeitspr√ºfung: {e}")
        return f"‚ùå Entschuldigung, es gab ein Problem bei der Verf√ºgbarkeitspr√ºfung: {str(e)}"

@function_tool()
async def gespraech_beenden(
    context: RunContext,
    grund: str = "Verabschiedung"
) -> str:
    """
    Beendet das Gespr√§ch SOFORT und h√∂flich nach einer Verabschiedung.
    KRITISCH: Diese Funktion beendet das Gespr√§ch SOFORT - keine weiteren Nachrichten!
    """
    try:
        # Gespr√§ch als beendet markieren - SOFORT!
        call_manager.initiate_call_end()
        call_manager.status = CallStatus.COMPLETED
        call_manager.add_note(f"Gespr√§ch beendet: {grund}")
        
        # SEHR KURZE Abschiedsnachricht - keine langen Texte!
        response = f"Auf Wiedersehen! Vielen Dank f√ºr Ihren Anruf."
        
        # Falls ein Termin gebucht wurde, kurze Best√§tigung
        if call_manager.scheduled_appointment:
            apt = call_manager.scheduled_appointment
            response += f"\n‚úÖ Ihr Termin: {apt['date']} um {apt['time']}"
            
        # Log f√ºr Debugging
        logging.info(f"üî¥ GESPR√ÑCH BEENDET SOFORT: {grund}")
        
        # Ende-Signal SOFORT hinzuf√ºgen
        response += f"\n*[CALL_END_SIGNAL]*"
        logging.info("üìû Ende-Signal hinzugef√ºgt - GESPR√ÑCH BEENDET")
        
        return response
        
    except Exception as e:
        logging.error(f"Fehler beim Beenden des Gespr√§chs: {e}")
        call_manager.initiate_call_end()
        call_manager.status = CallStatus.COMPLETED
        return f"Auf Wiedersehen!\n*[CALL_END_SIGNAL]*"

@function_tool()
async def notiz_hinzufuegen(
    context: RunContext,
    notiz: str
) -> str:
    """
    F√ºgt eine Notiz zum aktuellen Gespr√§ch hinzu.
    """
    try:
        call_manager.add_note(notiz)
        return f"üìù Notiz hinzugef√ºgt: {notiz}"
        
    except Exception as e:
        logging.error(f"Fehler beim Hinzuf√ºgen der Notiz: {e}")
        return f"‚ùå Fehler beim Speichern der Notiz."

@function_tool()
async def gespraech_status(
    context: RunContext
) -> str:
    """
    Gibt den aktuellen Gespr√§chsstatus zur√ºck.
    """
    try:
        status_text = {
            CallStatus.ACTIVE: "üü¢ Aktiv",
            CallStatus.ENDING: "üü° Wird beendet",
            CallStatus.COMPLETED: "üî¥ Beendet"
        }
        
        response = f"üìä **Gespr√§chsstatus:** {status_text[call_manager.status]}\n\n"
        
        if call_manager.patient_info:
            response += f"üë§ **Patient:** {call_manager.patient_info.get('name', 'N/A')}\n"
            response += f"üìû **Telefon:** {call_manager.patient_info.get('phone', 'N/A')}\n"
            
        if call_manager.scheduled_appointment:
            response += f"üìÖ **Termin gebucht:** Ja\n"
            
        if call_manager.notes:
            response += f"üìù **Notizen:** {len(call_manager.notes)}\n"
            
        return response
        
    except Exception as e:
        logging.error(f"Fehler beim Abrufen des Gespr√§chsstatus: {e}")
        return f"‚ùå Fehler beim Abrufen des Status."

@function_tool()
async def get_zeitbewusste_begruessung(
    context: RunContext
) -> str:
    """
    Erstellt eine zeitbewusste Begr√º√üung basierend auf der aktuellen Uhrzeit.
    """
    try:
        current_time = datetime.now()
        hour = current_time.hour
        
        # Bestimme die passende Begr√º√üung basierend auf der Uhrzeit
        if 6 <= hour < 12:
            begruessung = "Guten Morgen"
        elif 12 <= hour < 18:
            begruessung = "Guten Tag"
        else:
            begruessung = "Guten Abend"
        
        # Erweiterte Begr√º√üung mit Praxisinfo
        response = f"{begruessung}! Ich bin Sofia, Ihre Assistentin bei der Zahnarztpraxis Dr. Emanuela. "
        response += f"Es ist {current_time.strftime('%H:%M')} Uhr. "
        
        # Praxisstatus hinzuf√ºgen
        datetime_info = appointment_manager.get_current_datetime_info()
        if datetime_info['praxis_offen']:
            response += "Unsere Praxis ist derzeit ge√∂ffnet. "
        else:
            response += "Unsere Praxis ist derzeit geschlossen. "
            
        response += "Wie kann ich Ihnen heute helfen?"
        
        # Notiz hinzuf√ºgen
        call_manager.add_note(f"Begr√º√üung: {begruessung} um {current_time.strftime('%H:%M')} Uhr")
        
        return response
        
    except Exception as e:
        logging.error(f"Fehler bei zeitbewusster Begr√º√üung: {e}")
        return "Guten Tag! Ich bin Sofia, Ihre Assistentin bei der Zahnarztpraxis Dr. Emanuela. Wie kann ich Ihnen helfen?"

@function_tool()
async def get_zeitabhaengige_begruessung(
    context: RunContext
) -> str:
    """
    Gibt eine zeitabh√§ngige Begr√º√üung basierend auf der aktuellen Uhrzeit zur√ºck.
    04:00-10:30 = Guten Morgen
    10:31-17:59 = Guten Tag  
    18:00-03:59 = Guten Abend
    """
    try:
        # Aktuelle Zeit abrufen
        jetzt = datetime.now()
        stunde = jetzt.hour
        minute = jetzt.minute
        
        # Zeitabh√§ngige Begr√º√üung bestimmen
        if stunde >= 4 and (stunde < 10 or (stunde == 10 and minute <= 30)):
            begruessung = "Guten Morgen"
            tageszeit = "morgens"
        elif (stunde == 10 and minute > 30) or (stunde >= 11 and stunde < 18):
            begruessung = "Guten Tag"
            tageszeit = "tags√ºber"
        else:  # 18:00-03:59
            begruessung = "Guten Abend"
            tageszeit = "abends"
            
        # Formatierte Zeit
        zeit_formatiert = jetzt.strftime("%H:%M")
        datum_formatiert = jetzt.strftime("%A, %d.%m.%Y")
        
        # Deutsche Wochentage
        wochentage = {
            'Monday': 'Montag',
            'Tuesday': 'Dienstag', 
            'Wednesday': 'Mittwoch',
            'Thursday': 'Donnerstag',
            'Friday': 'Freitag',
            'Saturday': 'Samstag',
            'Sunday': 'Sonntag'
        }
        
        englischer_tag = jetzt.strftime("%A")
        deutscher_tag = wochentage.get(englischer_tag, englischer_tag)
        datum_deutsch = jetzt.strftime(f"{deutscher_tag}, %d.%m.%Y")
        
        antwort = f"üïê **Zeitabh√§ngige Begr√º√üung:**\n\n"
        antwort += f"**{begruessung}!** üëã\n\n"
        antwort += f" **Sofia hier, Ihre Praxisassistentin!**\n"
        antwort += f"Wie kann ich Ihnen helfen?\n\n"
        
        # KEINE √ñffnungszeiten am Anfang erw√§hnen - nur bei konkreten Fragen
        
        return antwort
        
    except Exception as e:
        logging.error(f"Fehler bei zeitabh√§ngiger Begr√º√üung: {e}")
        return "Guten Tag! Ich bin Sofia, Ihre Praxisassistentin. Wie kann ich Ihnen helfen?"

@function_tool()
async def termin_direkt_buchen(
    context: RunContext,
    patient_name: str,
    phone: str,
    appointment_date: str,
    appointment_time: str,
    treatment_type: str = "Kontrolluntersuchung",
    notes: str = ""
) -> str:
    """
    Bucht einen Termin DIREKT ohne doppelte Best√§tigung.
    Patient gibt Daten nur EINMAL ein und Termin wird sofort gebucht.
    """
    try:
        # Daten im CallManager speichern
        call_manager.set_patient_info({
            'name': patient_name,
            'phone': phone,
            'treatment_type': treatment_type,
            'notes': notes
        })
        
        # Pr√ºfe erst Verf√ºgbarkeit
        available = appointment_manager.ist_verfuegbar(appointment_date, appointment_time)
        
        if not available:
            # Alternative Termine vorschlagen statt Fehler
            alternatives = appointment_manager.get_intelligente_terminvorschlaege(treatment_type, appointment_date, 3)
            return f"‚ùå **Der gew√ºnschte Termin am {appointment_date} um {appointment_time} ist leider nicht verf√ºgbar.**\n\n" \
                   f"üîÑ **Ich habe diese Alternativen f√ºr Sie:**\n{alternatives}\n\n" \
                   f"Welcher Termin passt Ihnen?"
        
        # Termin direkt buchen (ohne nochmalige Best√§tigung)
        result = appointment_manager.termin_hinzufuegen(
            patient_name=patient_name,
            telefon=phone,
            datum=appointment_date,
            uhrzeit=appointment_time,
            behandlungsart=treatment_type,
            notizen=notes
        )
        
        if result:
            appointment_data = {
                'patient_name': patient_name,
                'phone': phone,
                'date': appointment_date,
                'time': appointment_time,
                'treatment': treatment_type,
                'notes': notes
            }
            call_manager.mark_appointment_scheduled(appointment_data)
            call_manager.add_note(f"Termin direkt gebucht: {appointment_date} {appointment_time}")
            
            return f"‚úÖ **Perfekt! Ihr Termin ist gebucht!**\n\n" \
                   f"üë§ **Name**: {patient_name}\n" \
                   f"üìû **Telefon**: {phone}\n" \
                   f"üìÖ **Termin**: {appointment_date} um {appointment_time}\n" \
                   f"ü¶∑ **Behandlung**: {treatment_type}\n" \
                   f"üìù **Notizen**: {notes if notes else 'Keine besonderen Notizen'}\n\n" \
                   f"üéâ **Ihr Termin ist best√§tigt!** Wir freuen uns auf Sie!\n" \
                   f"üìû Bei Fragen erreichen Sie uns unter: 0123 456 789"
        else:
            return f"‚ùå **Terminbuchung fehlgeschlagen**: Unbekannter Fehler beim Speichern"
            
    except Exception as e:
        logging.error(f"Fehler bei direkter Terminbuchung: {e}")
        return f"‚ùå Entschuldigung, es gab ein Problem bei der Terminbuchung: {str(e)}"
