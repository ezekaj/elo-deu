#!/bin/bash
set -euo pipefail

# Sofia Dental Calendar - Firewall Configuration Script
# This script configures UFW (Uncomplicated Firewall) for production deployment

echo "🔥 Configuring firewall for Sofia Dental Calendar..."

# Reset firewall to defaults
echo "Resetting firewall rules..."
ufw --force reset

# Default policies
ufw default deny incoming
ufw default allow outgoing
ufw default deny forward

# Allow SSH (change port if using non-standard)
echo "Allowing SSH access..."
ufw allow 22/tcp comment 'SSH'

# Allow HTTP and HTTPS
echo "Allowing HTTP/HTTPS..."
ufw allow 80/tcp comment 'HTTP'
ufw allow 443/tcp comment 'HTTPS'

# LiveKit WebRTC ports
echo "Allowing LiveKit WebRTC ports..."
# LiveKit API
ufw allow 7880/tcp comment 'LiveKit API'
# LiveKit WebRTC TCP fallback
ufw allow 7881/tcp comment 'LiveKit WebRTC TCP'
# LiveKit WebRTC UDP (media streams)
ufw allow 50000:60000/udp comment 'LiveKit WebRTC UDP'

# TURN server ports
echo "Allowing TURN server ports..."
ufw allow 3478/tcp comment 'TURN TCP'
ufw allow 3478/udp comment 'TURN UDP'
ufw allow 5349/tcp comment 'TURN TLS'
ufw allow 49152:65535/udp comment 'TURN relay ports'

# Allow Docker networks (internal communication)
echo "Allowing Docker internal networks..."
ufw allow in on docker0 comment 'Docker internal'
ufw allow in on br- comment 'Docker bridge networks'

# Rate limiting for SSH (anti-brute force)
echo "Setting up SSH rate limiting..."
ufw limit ssh/tcp comment 'SSH rate limit'

# Enable logging
ufw logging medium

# Show rules before enabling
echo -e "\n📋 Firewall rules to be applied:"
ufw show added

# Enable firewall
echo -e "\n🚀 Enabling firewall..."
ufw --force enable

# Show status
echo -e "\n✅ Firewall status:"
ufw status verbose

# Additional iptables rules for Docker
echo -e "\n🐳 Configuring Docker iptables rules..."

# Ensure Docker doesn't bypass UFW
cat > /etc/docker/daemon.json << 'EOF'
{
  "iptables": true,
  "ip-forward": true,
  "ip-masq": true,
  "userland-proxy": false,
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  }
}
EOF

# Create custom iptables rules for WebRTC
cat > /etc/iptables/rules.v4 << 'EOF'
# Generated by iptables-save
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:DOCKER-USER - [0:0]

# Docker user chain (processed before Docker's rules)
-A DOCKER-USER -j RETURN

# Allow established connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Allow loopback
-A INPUT -i lo -j ACCEPT

# Drop invalid packets
-A INPUT -m state --state INVALID -j DROP

# UDP hole punching for WebRTC
-A INPUT -p udp -m udp --dport 50000:60000 -m state --state NEW,ESTABLISHED -j ACCEPT
-A OUTPUT -p udp -m udp --sport 50000:60000 -m state --state ESTABLISHED -j ACCEPT

COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:DOCKER - [0:0]

# Masquerade for Docker containers
-A POSTROUTING -s 172.16.0.0/12 ! -o docker0 -j MASQUERADE

COMMIT
EOF

# Apply iptables rules
iptables-restore < /etc/iptables/rules.v4

# Make iptables rules persistent
apt-get install -y iptables-persistent
netfilter-persistent save

echo -e "\n✅ Firewall configuration complete!"
echo "⚠️  Important: Make sure to test all services after applying these rules"
echo "💡 Tip: Use 'ufw status numbered' to see rule numbers for deletion"